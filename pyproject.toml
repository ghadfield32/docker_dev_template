[project]
name = "docker_dev_template"
version = "0.1.0"
description = "Hierarchical Bayesian modeling for baseball exit velocity data with Computer Vision"
authors = [
  { name = "Marlins Data Science Team" },
]
license = "MIT"
readme = "README.md"

# ─── Restrict to Python 3.10–3.12 ──────────────────────────────
requires-python = ">=3.10,<3.13"

dependencies = [
  # Core Data Science Stack
  "pandas>=2.0",
  "numpy>=1.20,<2",
  "matplotlib>=3.4.0",
  "scikit-learn>=1.4.2",
  "scipy>=1.7.0",
  "seaborn>=0.11.0",
  "tabulate>=0.9.0",
  "pyarrow>=12.0.0",

  # Bayesian Modeling Stack
  "pymc>=5.0.0",
  "arviz>=0.14.0",
  "statsmodels>=0.13.0",
  "nutpie>=0.7.1",
  "numpyro>=0.18.0,<1.0.0",
  "pytensor>=2.18.3",
  "aesara>=2.9.4",

  # Machine Learning Stack
  "xgboost>=1.5.0",
  "lightgbm>=3.3.0",
  "catboost>=1.0.0",
  "shap>=0.40.0",
  "shapash[report]>=2.3.0",
  "shapiq>=1.3.0",
  "explainerdashboard>=0.3.0",
  "optuna>=4.3.0",
  "bayesian-optimization>=1.2.0",

  # Development and Jupyter Stack
  "jupyterlab>=3.0.0",
  "ipywidgets>=8.0.0",
  "tqdm>=4.67.0",
  "pretty_errors>=1.2.0",

  # MLflow and Experiment Tracking
  "mlflow>=3.1.1,<4.0.0",
  "optuna-integration[mlflow]>=4.4.0,<5.0.0",

  # Web and Database Stack  
  "streamlit>=1.20.0",
  "sqlalchemy>=1.4",
  "mysql-connector-python>=8.0",

  # Utilities
  "gdown>=4.0.0",
  "invoke>=2.2",
  "pydantic>=2.0.0",
  "pydantic-settings>=2.0.0",

  # ▶ Computer Vision Stack - INTEGRATED
  # Core CV libraries
  "ultralytics==8.3.158",  # YOLO v8 - pinned for stability
  "opencv-contrib-python-headless>=4.10.0",  # OpenCV with contrib modules, headless for Docker
  "roboflow==1.2.9",  # Roboflow API client - pinned for stability
  
  # Object tracking and supervision
  "supervision>=0.17.0",  # Modern CV utilities and tracking
  "lap>=0.4.0",  # Linear Assignment Problem solver for tracking
  
  # Image augmentation and processing
  "albumentations>=1.3.0",  # Fast image augmentation
  "imgaug>=0.4.0",  # Image augmentation library
  "pillow>=10.0.0",  # Image processing

  # ▶ Video processing and download stack
  "moviepy==2.2.1",  # Video editing - pinned for stability
  # pytube main-branch until next PyPI release (optional fallback)
  "pytube @ git+https://github.com/pytube/pytube",
  "yt-dlp==2025.9.5",  # Video download - pinned for stability
  # optional convenience wrapper (does NOT install ffmpeg binary!)
  "ffmpeg-python==0.2.0",  # FFmpeg Python wrapper - pinned for stability

  # ▶ JAX Integration (already in existing container)
  "jax>=0.4.23",
  "jaxlib>=0.4.23",

  # ▶ PyTorch Integration - platform specific with PEP-508 compliant syntax
  # Note: Actual PyTorch installation handled in Dockerfile for proper CUDA support
  # "torch>=2.0.0",
  # "torchvision>=0.15.0", 
  # "torchaudio>=2.0.0",
]

[project.optional-dependencies]
dev = [
  "pytest>=7.0.0",
  "black>=23.0.0",
  "isort>=5.0.0",
  "flake8>=5.0.0",
  "mypy>=1.0.0",
  "pre-commit>=3.0.0",
]

cuda = [
  "cupy-cuda12x>=12.0.0",  # For CUDA 12.x
]

basketball = [
  # Additional basketball-specific packages
  "sportsipy>=0.6.0",  # Sports statistics
  "nba-api>=1.4.0",  # NBA API client
]

# ─── uv configuration ──────────────────────────────────────────
[tool.uv]
index-strategy = "unsafe-best-match"

# Define named indexes for PyTorch CUDA variants
[[tool.uv.index]]
name = "pytorch-cu121"
url = "https://download.pytorch.org/whl/cu121"
explicit = true

[[tool.uv.index]]
name = "pytorch-cu118"
url = "https://download.pytorch.org/whl/cu118"
explicit = true

[[tool.uv.index]]
name = "pytorch-cu124"
url = "https://download.pytorch.org/whl/cu124"
explicit = true

[[tool.uv.index]]
name = "pytorch-cu128"
url = "https://download.pytorch.org/whl/cu128"
explicit = true

[tool.uv.pip]
# Configure UV pip behavior for optimal package resolution

# Map PyTorch dependencies to CUDA indexes for non-macOS platforms
[tool.uv.sources]
torch = [
  { index = "pytorch-cu124", marker = "sys_platform == 'linux' or sys_platform == 'win32'" },
]
torchvision = [
  { index = "pytorch-cu124", marker = "sys_platform == 'linux' or sys_platform == 'win32'" },
]
torchaudio = [
  { index = "pytorch-cu124", marker = "sys_platform == 'linux' or sys_platform == 'win32'" },
]

[tool.pytensor]
device    = "cuda"
floatX    = "float32"
allow_gc  = true
optimizer = "fast_run"
