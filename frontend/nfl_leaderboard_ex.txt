import React, { useState, useEffect } from 'react';
import { Upload, Download, BarChart3, Users, Target, TrendingUp, FileText, Calculator } from 'lucide-react';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ScatterPlot, Scatter, ResponsiveContainer, BarChart, Bar } from 'recharts';

const NFLKickerAssessment = () => {
  const [data, setData] = useState(null);
  const [processedData, setProcessedData] = useState(null);
  const [leaderboard, setLeaderboard] = useState([]);
  const [activeTab, setActiveTab] = useState('upload');
  const [modelParams, setModelParams] = useState({
    minAttempts: 10,
    weightRecency: 0.3,
    weightDistance: 0.4,
    weightAccuracy: 0.3
  });

  // Sample data structure for demonstration
  const sampleData = [
    { player_id: 1, player_name: "Justin Tucker", distance: 45, made: 1, week: 1, year: 2018 },
    { player_id: 2, player_name: "Harrison Butker", distance: 52, made: 1, week: 2, year: 2018 },
    // This would be populated from actual CSV upload
  ];

  const calculateKickerRating = (kickerData) => {
    if (!kickerData || kickerData.length === 0) return 0;
    
    // Calculate basic statistics
    const totalAttempts = kickerData.length;
    const totalMakes = kickerData.filter(kick => kick.made === 1).length;
    const accuracy = totalMakes / totalAttempts;
    
    // Distance-weighted accuracy
    const distanceWeightedScore = kickerData.reduce((sum, kick) => {
      const distanceWeight = Math.max(0, (kick.distance - 20) / 40); // Normalize distance
      return sum + (kick.made * (1 + distanceWeight));
    }, 0) / totalAttempts;
    
    // Recency weight (more recent kicks weighted higher)
    const maxWeek = Math.max(...kickerData.map(k => k.week));
    const recencyScore = kickerData.reduce((sum, kick) => {
      const recencyWeight = kick.week / maxWeek;
      return sum + (kick.made * recencyWeight);
    }, 0) / totalAttempts;
    
    // Composite rating
    const rating = (
      modelParams.weightAccuracy * accuracy +
      modelParams.weightDistance * distanceWeightedScore +
      modelParams.weightRecency * recencyScore
    ) * 100;
    
    return Math.round(rating * 100) / 100;
  };

  const processData = () => {
    if (!data) return;
    
    // Group by player
    const playerGroups = {};
    data.forEach(row => {
      if (!playerGroups[row.player_id]) {
        playerGroups[row.player_id] = {
          player_id: row.player_id,
          player_name: row.player_name,
          attempts: []
        };
      }
      playerGroups[row.player_id].attempts.push(row);
    });
    
    // Calculate ratings and create leaderboard
    const leaderboardData = Object.values(playerGroups)
      .filter(player => player.attempts.length >= modelParams.minAttempts)
      .map(player => ({
        player_id: player.player_id,
        player_name: player.player_name,
        rating: calculateKickerRating(player.attempts),
        attempts: player.attempts.length,
        accuracy: player.attempts.filter(a => a.made === 1).length / player.attempts.length
      }))
      .sort((a, b) => b.rating - a.rating)
      .map((player, index) => ({ ...player, rank: index + 1 }));
    
    setLeaderboard(leaderboardData);
    setProcessedData(playerGroups);
  };

  const handleFileUpload = (event) => {
    const file = event.target.files[0];
    if (file && file.type === 'text/csv') {
      const reader = new FileReader();
      reader.onload = (e) => {
        const text = e.target.result;
        const rows = text.split('\n').filter(row => row.trim());
        const headers = rows[0].split(',');
        const parsedData = rows.slice(1).map(row => {
          const values = row.split(',');
          const obj = {};
          headers.forEach((header, index) => {
            const value = values[index]?.trim();
            obj[header.trim()] = isNaN(value) ? value : Number(value);
          });
          return obj;
        });
        setData(parsedData);
      };
      reader.readAsText(file);
    }
  };

  const downloadLeaderboard = () => {
    const csv = [
      'player_id,player_name,rating,rank',
      ...leaderboard.map(row => `${row.player_id},${row.player_name},${row.rating},${row.rank}`)
    ].join('\n');
    
    const blob = new Blob([csv], { type: 'text/csv' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.style.display = 'none';
    a.href = url;
    a.download = 'leaderboard.csv';
    document.body.appendChild(a);
    a.click();
    window.URL.revokeObjectURL(url);
  };

  const generateReport = () => {
    const report = `
# NFL Kicker Rating Model - Technical Assessment

## Model Overview
This rating system evaluates NFL kickers based on:
- **Accuracy**: Base field goal percentage
- **Distance Performance**: Weighted by kick difficulty (distance)
- **Recency**: More recent performance weighted higher

## Model Parameters
- Minimum Attempts: ${modelParams.minAttempts}
- Accuracy Weight: ${modelParams.weightAccuracy}
- Distance Weight: ${modelParams.weightDistance}
- Recency Weight: ${modelParams.weightRecency}

## Top 10 Kickers (Week 6, 2018)
${leaderboard.slice(0, 10).map((k, i) => 
  `${i + 1}. ${k.player_name} - Rating: ${k.rating} (${k.attempts} attempts, ${(k.accuracy * 100).toFixed(1)}% accuracy)`
).join('\n')}

## Model Interpretation
- Rating Scale: 0-100 (higher is better)
- Considers both volume and efficiency
- Adjusts for kick difficulty and timing

## Potential Improvements
1. Incorporate situational factors (weather, pressure)
2. Add opponent strength adjustments
3. Include career trajectory analysis
4. Implement Bayesian updating for new kickers

## Next Steps
1. Validate model with out-of-sample data
2. Compare against Vegas odds or expert rankings
3. Implement confidence intervals
4. Add visualization for decision-makers
    `;
    
    const blob = new Blob([report], { type: 'text/markdown' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.style.display = 'none';
    a.href = url;
    a.download = 'kicker_analysis_report.md';
    document.body.appendChild(a);
    a.click();
    window.URL.revokeObjectURL(url);
  };

  useEffect(() => {
    if (data) {
      processData();
    }
  }, [data, modelParams]);

  const TabButton = ({ id, label, icon: Icon, active }) => (
    <button
      onClick={() => setActiveTab(id)}
      className={`flex items-center px-4 py-2 rounded-lg transition-colors ${
        active 
          ? 'bg-orange-600 text-white' 
          : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
      }`}
    >
      <Icon className="w-4 h-4 mr-2" />
      {label}
    </button>
  );

  return (
    <div className="min-h-screen bg-gradient-to-br from-orange-50 to-blue-50 p-6">
      <div className="max-w-7xl mx-auto">
        <div className="bg-white rounded-xl shadow-lg overflow-hidden">
          {/* Header */}
          <div className="bg-gradient-to-r from-orange-600 to-blue-600 text-white p-6">
            <h1 className="text-3xl font-bold flex items-center">
              <Target className="w-8 h-8 mr-3" />
              NFL Kicker Assessment Framework
            </h1>
            <p className="text-orange-100 mt-2">Denver Broncos Technical Assessment Tool</p>
          </div>

          {/* Navigation */}
          <div className="border-b border-gray-200 p-4">
            <div className="flex flex-wrap gap-2">
              <TabButton id="upload" label="Data Upload" icon={Upload} active={activeTab === 'upload'} />
              <TabButton id="model" label="Model Config" icon={Calculator} active={activeTab === 'model'} />
              <TabButton id="leaderboard" label="Leaderboard" icon={Users} active={activeTab === 'leaderboard'} />
              <TabButton id="analysis" label="Analysis" icon={BarChart3} active={activeTab === 'analysis'} />
              <TabButton id="export" label="Export" icon={Download} active={activeTab === 'export'} />
            </div>
          </div>

          {/* Content */}
          <div className="p-6">
            {activeTab === 'upload' && (
              <div className="space-y-6">
                <div className="border-2 border-dashed border-gray-300 rounded-lg p-8 text-center">
                  <Upload className="w-12 h-12 mx-auto text-gray-400 mb-4" />
                  <h3 className="text-lg font-semibold mb-2">Upload NFL Field Goal Data</h3>
                  <p className="text-gray-600 mb-4">Upload the CSV file from the Google Drive link</p>
                  <input
                    type="file"
                    accept=".csv"
                    onChange={handleFileUpload}
                    className="block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-orange-50 file:text-orange-700 hover:file:bg-orange-100"
                  />
                </div>
                
                {data && (
                  <div className="bg-green-50 border border-green-200 rounded-lg p-4">
                    <h4 className="font-semibold text-green-800">Data Loaded Successfully!</h4>
                    <p className="text-green-700">Loaded {data.length} field goal attempts</p>
                    <div className="mt-2 text-sm">
                      <strong>Sample data structure:</strong>
                      <pre className="bg-white p-2 rounded mt-1 text-xs overflow-x-auto">
                        {JSON.stringify(data[0], null, 2)}
                      </pre>
                    </div>
                  </div>
                )}
              </div>
            )}

            {activeTab === 'model' && (
              <div className="space-y-6">
                <h3 className="text-xl font-bold">Model Configuration</h3>
                
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div className="space-y-4">
                    <div>
                      <label className="block text-sm font-medium mb-2">Minimum Attempts</label>
                      <input
                        type="number"
                        value={modelParams.minAttempts}
                        onChange={(e) => setModelParams({...modelParams, minAttempts: parseInt(e.target.value)})}
                        className="w-full px-3 py-2 border rounded-lg"
                      />
                    </div>
                    
                    <div>
                      <label className="block text-sm font-medium mb-2">Accuracy Weight</label>
                      <input
                        type="range"
                        min="0"
                        max="1"
                        step="0.1"
                        value={modelParams.weightAccuracy}
                        onChange={(e) => setModelParams({...modelParams, weightAccuracy: parseFloat(e.target.value)})}
                        className="w-full"
                      />
                      <span className="text-sm text-gray-600">{modelParams.weightAccuracy}</span>
                    </div>
                    
                    <div>
                      <label className="block text-sm font-medium mb-2">Distance Weight</label>
                      <input
                        type="range"
                        min="0"
                        max="1"
                        step="0.1"
                        value={modelParams.weightDistance}
                        onChange={(e) => setModelParams({...modelParams, weightDistance: parseFloat(e.target.value)})}
                        className="w-full"
                      />
                      <span className="text-sm text-gray-600">{modelParams.weightDistance}</span>
                    </div>
                    
                    <div>
                      <label className="block text-sm font-medium mb-2">Recency Weight</label>
                      <input
                        type="range"
                        min="0"
                        max="1"
                        step="0.1"
                        value={modelParams.weightRecency}
                        onChange={(e) => setModelParams({...modelParams, weightRecency: parseFloat(e.target.value)})}
                        className="w-full"
                      />
                      <span className="text-sm text-gray-600">{modelParams.weightRecency}</span>
                    </div>
                  </div>
                  
                  <div className="bg-gray-50 p-4 rounded-lg">
                    <h4 className="font-semibold mb-3">Model Explanation</h4>
                    <div className="space-y-2 text-sm">
                      <p><strong>Accuracy:</strong> Base field goal percentage</p>
                      <p><strong>Distance:</strong> Rewards longer successful kicks</p>
                      <p><strong>Recency:</strong> Weights recent performance higher</p>
                      <p className="text-gray-600 text-xs mt-3">
                        The final rating is a weighted combination of these factors, 
                        scaled to 0-100 where higher is better.
                      </p>
                    </div>
                  </div>
                </div>
              </div>
            )}

            {activeTab === 'leaderboard' && (
              <div className="space-y-6">
                <div className="flex justify-between items-center">
                  <h3 className="text-xl font-bold">Kicker Leaderboard</h3>
                  {leaderboard.length > 0 && (
                    <button
                      onClick={downloadLeaderboard}
                      className="bg-orange-600 text-white px-4 py-2 rounded-lg hover:bg-orange-700 flex items-center"
                    >
                      <Download className="w-4 h-4 mr-2" />
                      Download CSV
                    </button>
                  )}
                </div>
                
                {leaderboard.length > 0 ? (
                  <div className="overflow-x-auto">
                    <table className="w-full border-collapse border border-gray-300">
                      <thead className="bg-gray-50">
                        <tr>
                          <th className="border border-gray-300 px-4 py-2 text-left">Rank</th>
                          <th className="border border-gray-300 px-4 py-2 text-left">Player Name</th>
                          <th className="border border-gray-300 px-4 py-2 text-left">Rating</th>
                          <th className="border border-gray-300 px-4 py-2 text-left">Attempts</th>
                          <th className="border border-gray-300 px-4 py-2 text-left">Accuracy</th>
                        </tr>
                      </thead>
                      <tbody>
                        {leaderboard.map(kicker => (
                          <tr key={kicker.player_id} className="hover:bg-gray-50">
                            <td className="border border-gray-300 px-4 py-2">{kicker.rank}</td>
                            <td className="border border-gray-300 px-4 py-2 font-medium">{kicker.player_name}</td>
                            <td className="border border-gray-300 px-4 py-2">{kicker.rating}</td>
                            <td className="border border-gray-300 px-4 py-2">{kicker.attempts}</td>
                            <td className="border border-gray-300 px-4 py-2">{(kicker.accuracy * 100).toFixed(1)}%</td>
                          </tr>
                        ))}
                      </tbody>
                    </table>
                  </div>
                ) : (
                  <div className="text-center py-12 text-gray-500">
                    Upload data and configure the model to see the leaderboard
                  </div>
                )}
              </div>
            )}

            {activeTab === 'analysis' && (
              <div className="space-y-6">
                <h3 className="text-xl font-bold">Data Analysis</h3>
                
                {leaderboard.length > 0 ? (
                  <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                    <div className="bg-white border rounded-lg p-4">
                      <h4 className="font-semibold mb-3">Rating Distribution</h4>
                      <ResponsiveContainer width="100%" height={300}>
                        <BarChart data={leaderboard.slice(0, 10)}>
                          <CartesianGrid strokeDasharray="3 3" />
                          <XAxis 
                            dataKey="player_name" 
                            angle={-45}
                            textAnchor="end"
                            height={100}
                          />
                          <YAxis />
                          <Tooltip />
                          <Bar dataKey="rating" fill="#ea580c" />
                        </BarChart>
                      </ResponsiveContainer>
                    </div>
                    
                    <div className="bg-white border rounded-lg p-4">
                      <h4 className="font-semibold mb-3">Rating vs Accuracy</h4>
                      <ResponsiveContainer width="100%" height={300}>
                        <Scatter data={leaderboard}>
                          <CartesianGrid strokeDasharray="3 3" />
                          <XAxis dataKey="accuracy" domain={[0, 1]} />
                          <YAxis dataKey="rating" />
                          <Tooltip 
                            formatter={(value, name) => [
                              name === 'accuracy' ? `${(value * 100).toFixed(1)}%` : value,
                              name === 'accuracy' ? 'Accuracy' : 'Rating'
                            ]}
                          />
                          <Scatter dataKey="rating" fill="#2563eb" />
                        </Scatter>
                      </ResponsiveContainer>
                    </div>
                  </div>
                ) : (
                  <div className="text-center py-12 text-gray-500">
                    Upload data to see analysis charts
                  </div>
                )}
              </div>
            )}

            {activeTab === 'export' && (
              <div className="space-y-6">
                <h3 className="text-xl font-bold">Export Deliverables</h3>
                
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  <div className="bg-blue-50 border border-blue-200 rounded-lg p-6">
                    <FileText className="w-8 h-8 text-blue-600 mb-3" />
                    <h4 className="font-semibold mb-2">Leaderboard CSV</h4>
                    <p className="text-sm text-gray-600 mb-4">Required format with player_id, player_name, rating, rank</p>
                    <button
                      onClick={downloadLeaderboard}
                      disabled={leaderboard.length === 0}
                      className="w-full bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 disabled:bg-gray-300"
                    >
                      Download CSV
                    </button>
                  </div>
                  
                  <div className="bg-green-50 border border-green-200 rounded-lg p-6">
                    <TrendingUp className="w-8 h-8 text-green-600 mb-3" />
                    <h4 className="font-semibold mb-2">Analysis Report</h4>
                    <p className="text-sm text-gray-600 mb-4">Model explanation and critique document</p>
                    <button
                      onClick={generateReport}
                      disabled={leaderboard.length === 0}
                      className="w-full bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700 disabled:bg-gray-300"
                    >
                      Generate Report
                    </button>
                  </div>
                  
                  <div className="bg-orange-50 border border-orange-200 rounded-lg p-6">
                    <Calculator className="w-8 h-8 text-orange-600 mb-3" />
                    <h4 className="font-semibold mb-2">Python Script</h4>
                    <p className="text-sm text-gray-600 mb-4">Documented code for model implementation</p>
                    <button
                      onClick={() => alert('Generate Python script based on your model configuration')}
                      className="w-full bg-orange-600 text-white px-4 py-2 rounded hover:bg-orange-700"
                    >
                      View Script
                    </button>
                  </div>
                </div>
                
                <div className="bg-gray-50 rounded-lg p-6">
                  <h4 className="font-semibold mb-3">Submission Checklist</h4>
                  <div className="space-y-2">
                    <label className="flex items-center">
                      <input type="checkbox" className="mr-2" />
                      <span className="text-sm">leaderboard.csv with required columns</span>
                    </label>
                    <label className="flex items-center">
                      <input type="checkbox" className="mr-2" />
                      <span className="text-sm">Well-documented Python/R script</span>
                    </label>
                    <label className="flex items-center">
                      <input type="checkbox" className="mr-2" />
                      <span className="text-sm">Model critique and improvement suggestions</span>
                    </label>
                    <label className="flex items-center">
                      <input type="checkbox" className="mr-2" />
                      <span className="text-sm">Email to footballresearch.technology@broncos.nfl.net</span>
                    </label>
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default NFLKickerAssessment;